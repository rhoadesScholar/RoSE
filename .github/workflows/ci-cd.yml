name: CI/CD Pipeline

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:

jobs:
  format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
        
    - name: Lint with flake8
      run: |
        flake8 src tests
        
    - name: Format with black
      run: |
        black src tests
        
    - name: Import sort with isort
      run: |
        isort src tests

    # - name: Type check with mypy
    #   run: |
    #     mypy src        
    - name: Commit and push formatting changes
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Commit only when black/isort actually changed files
        if ! git diff --quiet; then
          git add .
          git commit -m "ci: apply black/isort formatting [skip ci]"
          git push
        else
          echo "No formatting changes to commit"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  test:
    name: ${{ matrix.platform }} (${{ matrix.python-version }})
    runs-on: ${{ matrix.platform }}
    needs: format
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache-dependency-path: "pyproject.toml"
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install .[test]
      - name: Test
        run: pytest --color=yes --cov --cov-report=xml --cov-report=term-missing
      - name: Coverage
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}


  
  tag-release:
    name: Tag Release
    needs: test
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.date_tag.outputs.tag }}
    if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip ci]')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Get PEP440 date tag
        id: date_tag
        run: |
          year=$(date -u +'%Y' | sed 's/^0*//')
          month=$(date -u +'%m' | sed 's/^0*//')
          day=$(date -u +'%d' | sed 's/^0*//')
          hour=$(date -u +'%H' | sed 's/^0*//')
          minute=$(date -u +'%M' | sed 's/^0*//')
          tag="$year.$month.$day.$hour$minute"
          echo "tag=$tag" >> $GITHUB_OUTPUT
      - name: Update CITATION.cff version and date-released
        run: |
          tag=${{ steps.date_tag.outputs.tag }}
          date=$(date -u +"%Y-%m-%d")
          sed -i.bak -E "s/^version: .*/version: ${tag}/" CITATION.cff
          sed -i.bak -E "s/^date-released: .*/date-released: ${date}/" CITATION.cff
          rm CITATION.cff.bak
          git add CITATION.cff
          git commit -m "Update CITATION.cff for version ${tag}"
      - name: Push changes
        run: |
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create and push tag
        run: |
          git tag ${{ steps.date_tag.outputs.tag }}
          git push origin ${{ steps.date_tag.outputs.tag }}
      - name: Create GitHub Release with Notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.date_tag.outputs.tag }} --generate-notes --title "${{ steps.date_tag.outputs.tag }}"

  publish:
    name: Publish
    needs: tag-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.tag-release.outputs.tag }}
      - name: Fetch latest tags
        run: git fetch --tags origin
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install build tools
        run: pip install -U pip hatch twine
      - name: Build sdist and wheel
        run: hatch build -t sdist -t wheel
      - name: Check distributions
        run: twine check dist/*
      - name: Publish to PyPI
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}